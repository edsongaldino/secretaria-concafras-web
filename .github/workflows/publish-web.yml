name: Front - Build & Deploy (Angular → VPS)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: front-deploy
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      # Build CSR (angular.json: outputMode: "static", prerender: false)
      - name: Build (production CSR)
        run: npm run build -- --configuration production --output-path=dist

      # Descobre onde está o index.html (dist/, dist/browser, dist/ProjetoFrontAngular, etc.)
      - name: Find dist folder
        id: finddist
        shell: bash
        run: |
          set -e
          CANDIDATES=(
            "dist"
            "dist/browser"
            "dist/ProjetoFrontAngular"
            "dist/ProjetoFrontAngular/browser"
          )
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/index.html" ] || [ -f "$d/index.csr.html" ]; then
              echo "dist_dir=$d" >> "$GITHUB_OUTPUT"
              echo "Usando dist em: $d"
              exit 0
            fi
          done
          echo "Não encontrei index.html em dist. Listando dist/:" >&2
          ls -lah dist || true
          exit 1

      - name: Pack dist
        run: |
          mkdir -p package
          tar -czf package/dist.tar.gz -C "${{ steps.finddist.outputs.dist_dir }}" .
          ls -lh package/dist.tar.gz

      # Garante pastas remotas
      - name: Prepare remote dirs
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          port: 22
          script: |
            set -e
            mkdir -p /root/apps/secretaria-concafras/web/tmp
            mkdir -p /root/apps/secretaria-concafras/web/dist

      # Upload achatado (sem recriar "package/")
      - name: Upload dist.tar.gz to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          port: 22
          source: "package/dist.tar.gz"
          target: "/root/apps/secretaria-concafras/web/tmp/"
          strip_components: 1

      - name: Atomic replace dist (with backup) & restart ONLY web
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          port: 22
          script: |
            set -euo pipefail
            BASE="/root/apps/secretaria-concafras/web"
            TS="$(date +%Y%m%d-%H%M%S)"

            mkdir -p "$BASE/tmp" "$BASE/dist_new"

            # encontra o pacote, mesmo se caiu em subpasta
            PKG="$(find "$BASE/tmp" -maxdepth 2 -type f -name 'dist.tar.gz' -print -quit || true)"
            if [ -z "$PKG" ]; then
              echo "ERRO: dist.tar.gz não encontrado em $BASE/tmp"
              ls -lah "$BASE/tmp" || true
              exit 1
            fi
            echo "Usando pacote: $PKG"
            tar -xzf "$PKG" -C "$BASE/dist_new"

            # Normaliza se vier com 'browser/' ou única subpasta
            if [ ! -f "$BASE/dist_new/index.html" ] && [ ! -f "$BASE/dist_new/index.csr.html" ]; then
              if [ -f "$BASE/dist_new/browser/index.html" ] || [ -f "$BASE/dist_new/browser/index.csr.html" ]; then
                shopt -s dotglob
                mv "$BASE/dist_new/browser"/* "$BASE/dist_new/"
                rmdir "$BASE/dist_new/browser"
                shopt -u dotglob
              else
                SUB="$(find "$BASE/dist_new" -mindepth 1 -maxdepth 1 -type d -print -quit || true)"
                if [ -n "$SUB" ] && { [ -f "$SUB/index.html" ] || [ -f "$SUB/index.csr.html" ]; }; then
                  shopt -s dotglob
                  mv "$SUB"/* "$BASE/dist_new/"
                  rmdir "$SUB"
                  shopt -u dotglob
                fi
              fi
            fi

            # sanity checks finais
            if [ ! -f "$BASE/dist_new/index.html" ] && [ -f "$BASE/dist_new/index.csr.html" ]; then
              mv "$BASE/dist_new/index.csr.html" "$BASE/dist_new/index.html"
            fi
            if [ ! -f "$BASE/dist_new/index.html" ]; then
              echo "sem index.html após normalização"
              find "$BASE/dist_new" -maxdepth 2 -type f -name 'index*.html' -print || true
              exit 1
            fi

            # backup do dist atual (rollback fácil)
            if [ -d "$BASE/dist" ] && [ -n "$(ls -A "$BASE/dist")" ]; then
              tar -czf "$BASE/backup-$TS.tar.gz" -C "$BASE/dist" .
            fi

            rm -rf "$BASE/dist"
            mv "$BASE/dist_new" "$BASE/dist"
            rm -f "$BASE/tmp/dist.tar.gz" || true
            rm -f "$PKG" || true

            # ⚠️ Sobe apenas o web, sem tocar nas dependências (evita pull da API)
            cd "/root/apps/secretaria-concafras"
            docker compose --env-file .env up -d --no-deps web || docker compose restart web || true
